{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":["file:///G:/projects/backend/appointment_app/frontend/fuctions/api/client.ts"],"sourcesContent":["export const client = {\r\n  // login\r\n  async Login(email: string, password: string) {\r\n    console.log(\"Email client\", email);\r\n    console.log(\"Password\", password);\r\n    const response = await fetch(\r\n      `${process.env.NEXT_PUBLIC_API_URL}/users/login`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          accept: \"application/json\",\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        },\r\n        body: `grant_type=password&username=${email}&password=${password}&scope=&client_id=string&client_secret=********`,\r\n        credentials: \"include\",\r\n      }\r\n    );\r\n    return response;\r\n  },\r\n\r\n  // get user\r\n  async GetUser(token: string) {\r\n    const response = await fetch(\r\n      `${process.env.NEXT_PUBLIC_API_URL}/users/me`,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      }\r\n    );\r\n    return response;\r\n  },\r\n\r\n  // refresh token\r\n  async refreshAccessToken() {\r\n    try {\r\n      const res = await fetch(\r\n        `${process.env.NEXT_PUBLIC_API_URL}/users/refresh`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          // If your API already reads refresh_token from cookie, body may not be required\r\n          // body: JSON.stringify({ refresh_token: token.refresh_token }),\r\n          credentials: \"include\", // send cookies!\r\n        }\r\n      );\r\n\r\n      if (!res.ok) throw new Error(\"Failed to refresh token\");\r\n\r\n      const refreshed = await res.json();\r\n      console.log(\"shhhhhhhhhhhhhhhhhhhh\", refreshed);\r\n\r\n      return {\r\n        access_token: refreshed.access_token,\r\n        expires_at: Math.floor(Date.now() / 1000 + refreshed.expires_in),\r\n      };\r\n    } catch (err) {\r\n      console.error(\"Error refreshing token:\", err);\r\n      return { error: \"RefreshAccessTokenError\" };\r\n    }\r\n  },\r\n\r\n  // âœ… Corrected version\r\n  async resetPassword(email: string) {\r\n    console.log(\"|Email: reset\", email);\r\n    const response = await fetch(\r\n      `${process.env.NEXT_PUBLIC_API_URL}/users/request-password-reset`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          accept: \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email }), // ðŸ‘ˆ Wrap in object\r\n      }\r\n    );\r\n\r\n    // ðŸš¨ Also: Check if response is OK before parsing JSON\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    return await response.json();\r\n  },\r\n};\r\n"],"names":[],"mappings":";;;;AAAO,MAAM,SAAS;IACpB,QAAQ;IACR,MAAM,OAAM,KAAa,EAAE,QAAgB;QACzC,QAAQ,GAAG,CAAC,gBAAgB;QAC5B,QAAQ,GAAG,CAAC,YAAY;QACxB,MAAM,WAAW,MAAM,MACrB,oEAAmC,YAAY,CAAC,EAChD;YACE,QAAQ;YACR,SAAS;gBACP,QAAQ;gBACR,gBAAgB;YAClB;YACA,MAAM,CAAC,6BAA6B,EAAE,MAAM,UAAU,EAAE,SAAS,+CAA+C,CAAC;YACjH,aAAa;QACf;QAEF,OAAO;IACT;IAEA,WAAW;IACX,MAAM,SAAQ,KAAa;QACzB,MAAM,WAAW,MAAM,MACrB,oEAAmC,SAAS,CAAC,EAC7C;YACE,SAAS;gBACP,eAAe,CAAC,OAAO,EAAE,OAAO;YAClC;QACF;QAEF,OAAO;IACT;IAEA,gBAAgB;IAChB,MAAM;QACJ,IAAI;YACF,MAAM,MAAM,MAAM,MAChB,oEAAmC,cAAc,CAAC,EAClD;gBACE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;gBACA,gFAAgF;gBAChF,gEAAgE;gBAChE,aAAa;YACf;YAGF,IAAI,CAAC,IAAI,EAAE,EAAE,MAAM,IAAI,MAAM;YAE7B,MAAM,YAAY,MAAM,IAAI,IAAI;YAChC,QAAQ,GAAG,CAAC,yBAAyB;YAErC,OAAO;gBACL,cAAc,UAAU,YAAY;gBACpC,YAAY,KAAK,KAAK,CAAC,KAAK,GAAG,KAAK,OAAO,UAAU,UAAU;YACjE;QACF,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,2BAA2B;YACzC,OAAO;gBAAE,OAAO;YAA0B;QAC5C;IACF;IAEA,sBAAsB;IACtB,MAAM,eAAc,KAAa;QAC/B,QAAQ,GAAG,CAAC,iBAAiB;QAC7B,MAAM,WAAW,MAAM,MACrB,oEAAmC,6BAA6B,CAAC,EACjE;YACE,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,QAAQ;YACV;YACA,MAAM,KAAK,SAAS,CAAC;gBAAE;YAAM;QAC/B;QAGF,uDAAuD;QACvD,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,SAAS,MAAM,EAAE;QAC1D;QAEA,OAAO,MAAM,SAAS,IAAI;IAC5B;AACF","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///G:/projects/backend/appointment_app/frontend/auth.ts"],"sourcesContent":["import NextAuth, { CredentialsSignin } from \"next-auth\";\r\nimport Credentials from \"next-auth/providers/credentials\";\r\nimport { client } from \"./fuctions/api/client\";\r\n\r\n// Extend NextAuth types\r\ndeclare module \"next-auth\" {\r\n  interface User {\r\n    first_name: string;\r\n    last_name: string;\r\n    id: string;\r\n    email: string;\r\n    emailVerified: Date | null;\r\n    is_active: boolean;\r\n    is_verified: boolean;\r\n    roles: string[];\r\n    permissions: string[];\r\n    access_token: string;\r\n    expires_at: number;\r\n  }\r\n\r\n  interface Session {\r\n    access_token: string;\r\n    error?: string;\r\n  }\r\n}\r\n\r\nexport class InvalidLoginError extends CredentialsSignin {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.message = message;\r\n  }\r\n}\r\n\r\nexport const { handlers, signIn, signOut, auth } = NextAuth({\r\n  providers: [\r\n    Credentials({\r\n      async authorize(credentials) {\r\n        const { email, password } = credentials as {\r\n          email: string;\r\n          password: string;\r\n        };\r\n\r\n        try {\r\n          // Login â†’ returns tokens\r\n          const response = await client.Login(email, password);\r\n          const data = await response.json();\r\n          if (!response.ok) {\r\n            console.log(\"Auuuht\", data);\r\n          }\r\n\r\n          if (!response.ok) throw new InvalidLoginError(data.detail);\r\n\r\n          // Fetch user profile with access_token\r\n          const userRes = await client.GetUser(data.access_token);\r\n          const user = await userRes.json();\r\n          console.log(\"User\", user);\r\n          return {\r\n            ...user,\r\n            access_token: data.access_token,\r\n            expires_at: Math.floor(Date.now() / 1000 + data.expires_in), // expiry in seconds\r\n          };\r\n        } catch (error: any) {\r\n          throw new InvalidLoginError(error.message);\r\n        }\r\n      },\r\n    }),\r\n  ],\r\n\r\n  callbacks: {\r\n    // Runs whenever token is created/updated\r\n    async jwt({ token, user }) {\r\n      // Initial login â†’ attach tokens + user info\r\n      console.log(\"Usershit\", user);\r\n      if (user) {\r\n        return {\r\n          ...token,\r\n          id: user.id,\r\n          email: user.email,\r\n          firstName: user.first_name,\r\n          lastName: user.last_name,\r\n          roles: user.roles,\r\n          is_active: user.is_active,\r\n          is_verified: user.is_verified,\r\n          permissions: user.permissions,\r\n          access_token: user.access_token,\r\n          expires_at: user.expires_at,\r\n        };\r\n      }\r\n\r\n      // If token still valid â†’ return it\r\n      if (Date.now() < (token.expires_at as number) * 1000) {\r\n        return token;\r\n      }\r\n      // signOut();\r\n      // Otherwise refresh\r\n      const refreshed = await client.refreshAccessToken();\r\n\r\n      if (refreshed.error) {\r\n        return { ...token, error: \"RefreshAccessTokenError\" };\r\n      }\r\n\r\n      return {\r\n        ...token,\r\n        access_token: refreshed.access_token,\r\n        expires_at: refreshed.expires_at,\r\n      };\r\n    },\r\n\r\n    // What's sent to the client (session)\r\n    async session({ session, token }) {\r\n      session.user = {\r\n        id: token.id as string,\r\n        email: token.email as string,\r\n        emailVerified: (token.is_verified as boolean) ? new Date() : null,\r\n        first_name: token.firstName as string, // note: you stored it as 'firstName' in JWT\r\n        last_name: token.lastName as string,\r\n        is_active: token.is_active as boolean,\r\n        is_verified: token.is_verified as boolean,\r\n        roles: token.roles as string[],\r\n        permissions: token.permissions as string[],\r\n        access_token: token.access_token as string,\r\n        expires_at: token.expires_at as number,\r\n      };\r\n\r\n      session.access_token = token.access_token as string;\r\n      session.error = token.error as string | undefined;\r\n\r\n      return session;\r\n    },\r\n    // async session({ session, token }) {\r\n    //   session.user = {\r\n    //     id: token.id as string,\r\n    //     email: token.email as string,\r\n    //     emailVerified: null,\r\n    //     roles: token.roles as string[],\r\n    //     permissions: token.permissions as string[],\r\n    //     access_token: token.access_token as string,\r\n    //     expires_at: token.expires_at as number,\r\n    //   };\r\n\r\n    //   session.access_token = token.access_token as string;\r\n    //   session.error = token.error as string | undefined;\r\n\r\n    //   return session;\r\n    // },\r\n  },\r\n\r\n  pages: {\r\n    signIn: \"/signin\",\r\n  },\r\n});\r\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA;AAAA;AACA;AAAA;AACA;;;;AAwBO,MAAM,0BAA0B,yNAAiB;IACtD,YAAY,OAAe,CAAE;QAC3B,KAAK,CAAC;QACN,IAAI,CAAC,OAAO,GAAG;IACjB;AACF;AAEO,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,IAAA,4QAAQ,EAAC;IAC1D,WAAW;QACT,IAAA,iOAAW,EAAC;YACV,MAAM,WAAU,WAAW;gBACzB,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG;gBAK5B,IAAI;oBACF,yBAAyB;oBACzB,MAAM,WAAW,MAAM,mIAAM,CAAC,KAAK,CAAC,OAAO;oBAC3C,MAAM,OAAO,MAAM,SAAS,IAAI;oBAChC,IAAI,CAAC,SAAS,EAAE,EAAE;wBAChB,QAAQ,GAAG,CAAC,UAAU;oBACxB;oBAEA,IAAI,CAAC,SAAS,EAAE,EAAE,MAAM,IAAI,kBAAkB,KAAK,MAAM;oBAEzD,uCAAuC;oBACvC,MAAM,UAAU,MAAM,mIAAM,CAAC,OAAO,CAAC,KAAK,YAAY;oBACtD,MAAM,OAAO,MAAM,QAAQ,IAAI;oBAC/B,QAAQ,GAAG,CAAC,QAAQ;oBACpB,OAAO;wBACL,GAAG,IAAI;wBACP,cAAc,KAAK,YAAY;wBAC/B,YAAY,KAAK,KAAK,CAAC,KAAK,GAAG,KAAK,OAAO,KAAK,UAAU;oBAC5D;gBACF,EAAE,OAAO,OAAY;oBACnB,MAAM,IAAI,kBAAkB,MAAM,OAAO;gBAC3C;YACF;QACF;KACD;IAED,WAAW;QACT,yCAAyC;QACzC,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,4CAA4C;YAC5C,QAAQ,GAAG,CAAC,YAAY;YACxB,IAAI,MAAM;gBACR,OAAO;oBACL,GAAG,KAAK;oBACR,IAAI,KAAK,EAAE;oBACX,OAAO,KAAK,KAAK;oBACjB,WAAW,KAAK,UAAU;oBAC1B,UAAU,KAAK,SAAS;oBACxB,OAAO,KAAK,KAAK;oBACjB,WAAW,KAAK,SAAS;oBACzB,aAAa,KAAK,WAAW;oBAC7B,aAAa,KAAK,WAAW;oBAC7B,cAAc,KAAK,YAAY;oBAC/B,YAAY,KAAK,UAAU;gBAC7B;YACF;YAEA,mCAAmC;YACnC,IAAI,KAAK,GAAG,KAAK,AAAC,MAAM,UAAU,GAAc,MAAM;gBACpD,OAAO;YACT;YACA,aAAa;YACb,oBAAoB;YACpB,MAAM,YAAY,MAAM,mIAAM,CAAC,kBAAkB;YAEjD,IAAI,UAAU,KAAK,EAAE;gBACnB,OAAO;oBAAE,GAAG,KAAK;oBAAE,OAAO;gBAA0B;YACtD;YAEA,OAAO;gBACL,GAAG,KAAK;gBACR,cAAc,UAAU,YAAY;gBACpC,YAAY,UAAU,UAAU;YAClC;QACF;QAEA,sCAAsC;QACtC,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,QAAQ,IAAI,GAAG;gBACb,IAAI,MAAM,EAAE;gBACZ,OAAO,MAAM,KAAK;gBAClB,eAAe,AAAC,MAAM,WAAW,GAAe,IAAI,SAAS;gBAC7D,YAAY,MAAM,SAAS;gBAC3B,WAAW,MAAM,QAAQ;gBACzB,WAAW,MAAM,SAAS;gBAC1B,aAAa,MAAM,WAAW;gBAC9B,OAAO,MAAM,KAAK;gBAClB,aAAa,MAAM,WAAW;gBAC9B,cAAc,MAAM,YAAY;gBAChC,YAAY,MAAM,UAAU;YAC9B;YAEA,QAAQ,YAAY,GAAG,MAAM,YAAY;YACzC,QAAQ,KAAK,GAAG,MAAM,KAAK;YAE3B,OAAO;QACT;IAiBF;IAEA,OAAO;QACL,QAAQ;IACV;AACF","debugId":null}},
    {"offset": {"line": 225, "column": 0}, "map": {"version":3,"sources":["file:///G:/projects/backend/appointment_app/frontend/components/ui/avatar.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const Avatar = registerClientReference(\n    function() { throw new Error(\"Attempted to call Avatar() from the server but Avatar is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/ui/avatar.tsx <module evaluation>\",\n    \"Avatar\",\n);\nexport const AvatarFallback = registerClientReference(\n    function() { throw new Error(\"Attempted to call AvatarFallback() from the server but AvatarFallback is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/ui/avatar.tsx <module evaluation>\",\n    \"AvatarFallback\",\n);\nexport const AvatarImage = registerClientReference(\n    function() { throw new Error(\"Attempted to call AvatarImage() from the server but AvatarImage is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/ui/avatar.tsx <module evaluation>\",\n    \"AvatarImage\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;;;;;AACvE;;AACO,MAAM,SAAS,IAAA,uXAAuB,EACzC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,0DACA;AAEG,MAAM,iBAAiB,IAAA,uXAAuB,EACjD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,0DACA;AAEG,MAAM,cAAc,IAAA,uXAAuB,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,0DACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 249, "column": 0}, "map": {"version":3,"sources":["file:///G:/projects/backend/appointment_app/frontend/components/ui/avatar.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const Avatar = registerClientReference(\n    function() { throw new Error(\"Attempted to call Avatar() from the server but Avatar is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/ui/avatar.tsx\",\n    \"Avatar\",\n);\nexport const AvatarFallback = registerClientReference(\n    function() { throw new Error(\"Attempted to call AvatarFallback() from the server but AvatarFallback is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/ui/avatar.tsx\",\n    \"AvatarFallback\",\n);\nexport const AvatarImage = registerClientReference(\n    function() { throw new Error(\"Attempted to call AvatarImage() from the server but AvatarImage is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/ui/avatar.tsx\",\n    \"AvatarImage\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;;;;;AACvE;;AACO,MAAM,SAAS,IAAA,uXAAuB,EACzC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,sCACA;AAEG,MAAM,iBAAiB,IAAA,uXAAuB,EACjD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,sCACA;AAEG,MAAM,cAAc,IAAA,uXAAuB,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,sCACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 273, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 281, "column": 0}, "map": {"version":3,"sources":["file:///G:/projects/backend/appointment_app/frontend/app/%28dashboard%29/profile/page.tsx"],"sourcesContent":["import { auth } from \"@/auth\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport Image from \"next/image\";\r\n\r\nexport default async function Profile() {\r\n  const session = await auth();\r\n  console.log(\"User\", session?.user);\r\n  return (\r\n    <>\r\n      <div className=\"border border-[#eeeeee] max-w-[388px] w-full ml-[122px] mt-[160px] p-6\">\r\n        <div className=\"\">\r\n          <Avatar className=\"w-[64px] h-[64px]\">\r\n            <AvatarImage src={\"/avatar.png\"} />\r\n            <AvatarFallback>AB</AvatarFallback>\r\n            <Image src={\"/active.png\"} alt=\"active\" />\r\n          </Avatar>\r\n          <div className=\"mt-4 flex justify-between\">\r\n            <div className=\"\">\r\n              {\" \"}\r\n              <h1 className=\"mb-0 text-lg font-bold text-brand-black\">\r\n                {session?.user?.first_name}\r\n              </h1>\r\n              <p className=\"text-brand-gray\"> {session?.user?.email} </p>\r\n            </div>\r\n            <div className=\" flex items-center\">\r\n              {\" \"}\r\n              <span className=\"bg-brand text-brand-primary text-[16px] rounded-full py-1 px-4\">\r\n                {session?.user?.is_verified ? \"Verivied\" : \"not varivied\"}{\" \"}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;;AAEe,eAAe;IAC5B,MAAM,UAAU,MAAM,IAAA,4GAAI;IAC1B,QAAQ,GAAG,CAAC,QAAQ,SAAS;IAC7B,qBACE;kBACE,cAAA,6VAAC;YAAI,WAAU;sBACb,cAAA,6VAAC;gBAAI,WAAU;;kCACb,6VAAC,qIAAM;wBAAC,WAAU;;0CAChB,6VAAC,0IAAW;gCAAC,KAAK;;;;;;0CAClB,6VAAC,6IAAc;0CAAC;;;;;;0CAChB,6VAAC,uPAAK;gCAAC,KAAK;gCAAe,KAAI;;;;;;;;;;;;kCAEjC,6VAAC;wBAAI,WAAU;;0CACb,6VAAC;gCAAI,WAAU;;oCACZ;kDACD,6VAAC;wCAAG,WAAU;kDACX,SAAS,MAAM;;;;;;kDAElB,6VAAC;wCAAE,WAAU;;4CAAkB;4CAAE,SAAS,MAAM;4CAAM;;;;;;;;;;;;;0CAExD,6VAAC;gCAAI,WAAU;;oCACZ;kDACD,6VAAC;wCAAK,WAAU;;4CACb,SAAS,MAAM,cAAc,aAAa;4CAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQ3E","debugId":null}}]
}