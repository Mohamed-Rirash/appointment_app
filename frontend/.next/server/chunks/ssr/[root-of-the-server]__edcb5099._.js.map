{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 85, "column": 0}, "map": {"version":3,"sources":["file:///G:/projects/backend/appointment_app/frontend/helpers/api/client.ts"],"sourcesContent":["// fuctions/api/client.ts\r\nimport axios from \"axios\";\r\n\r\n// Create an axios instance with base URL and default config\r\nconst apiClient = axios.create({\r\n  baseURL: process.env.NEXT_PUBLIC_API_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n    Accept: \"application/json\",\r\n  },\r\n  withCredentials: true, // equivalent to fetch's credentials: \"include\"\r\n});\r\n\r\n// Define types\r\ninterface Userdata {\r\n  email: string;\r\n  first_name: string;\r\n  is_active: boolean;\r\n  is_verified: boolean;\r\n  last_name: string;\r\n  role: string;\r\n  send_welcome_email: boolean;\r\n}\r\n\r\ninterface LoginResponse {\r\n  access_token: string;\r\n  token_type: string;\r\n  expires_in: number;\r\n}\r\n\r\ninterface RefreshResponse {\r\n  access_token: string;\r\n  expires_in: number;\r\n}\r\n\r\nexport const client = {\r\n  // Login\r\n  async Login(email: string, password: string): Promise<LoginResponse> {\r\n    console.log(\"Email client\", email);\r\n    console.log(\"Password\", password);\r\n\r\n    try {\r\n      const response = await apiClient.post<LoginResponse>(\r\n        \"/users/login\",\r\n        new URLSearchParams({\r\n          grant_type: \"password\",\r\n          username: email,\r\n          password: password,\r\n          scope: \"\",\r\n          client_id: \"string\",\r\n          client_secret: \"********\",\r\n        }).toString(),\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n          },\r\n        }\r\n      );\r\n      console.log(\"ssss\", response.data);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.response) {\r\n        // Server responded with error status\r\n        throw new Error(\r\n          error.response.data?.detail ||\r\n            `Login failed: ${error.response.status}`\r\n        );\r\n      } else if (error.request) {\r\n        throw new Error(\"No response from server\");\r\n      } else {\r\n        throw new Error(\"Login request setup failed\");\r\n      }\r\n    }\r\n  },\r\n\r\n  // Get User\r\n  async GetUser(token: string) {\r\n    try {\r\n      const response = await apiClient.get(\"/users/me\", {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw new Error(error.response?.data?.detail || \"Failed to fetch user\");\r\n    }\r\n  },\r\n\r\n  // Refresh Token\r\n  async refreshAccessToken() {\r\n    try {\r\n      const response = await apiClient.post<RefreshResponse>(\"/users/refresh\");\r\n      return {\r\n        access_token: response.data.access_token,\r\n        expires_at: Math.floor(Date.now() / 1000 + response.data.expires_in),\r\n      };\r\n    } catch (error: any) {\r\n      console.error(\"Error refreshing token:\", error);\r\n      throw new Error(\"RefreshAccessTokenError\");\r\n    }\r\n  },\r\n\r\n  // Reset Password\r\n  async resetPassword(email: string) {\r\n    console.log(\"|Email: reset\", email);\r\n    try {\r\n      const response = await apiClient.post(\"/users/request-password-reset\", {\r\n        email,\r\n      });\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw new Error(\r\n        error.response?.data?.detail ||\r\n          `Failed to send reset email: ${\r\n            error.response?.status || \"network error\"\r\n          }`\r\n      );\r\n    }\r\n  },\r\n\r\n  // Change Password\r\n  async changePassword(\r\n    current_password: string,\r\n    new_password: string,\r\n    token: string\r\n  ) {\r\n    try {\r\n      const response = await apiClient.post(\r\n        \"/users/change-password\",\r\n        { current_password, new_password },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      return response.data;\r\n    } catch (error: any) {\r\n      console.error(\"Error changing password:\", error);\r\n      throw new Error(\r\n        error.response?.data?.detail || \"Failed to change password\"\r\n      );\r\n    }\r\n  },\r\n\r\n  // Create User (Admin)\r\n  async createUser(data: Userdata, token?: string) {\r\n    try {\r\n      const response = await apiClient.post(\"/admin/users\", data, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw new Error(error.response?.data?.detail || \"Failed to create user\");\r\n    }\r\n  },\r\n\r\n  // Get Users (Admin)\r\n  async getUsers(token: string, params: Record<string, any>) {\r\n    console.log(\"Get\");\r\n    try {\r\n      const response = await apiClient.get(\"/admin/users\", {\r\n        params,\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw new Error(error.response?.data?.detail || \"Failed to fetch users\");\r\n    }\r\n  },\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 220, "column": 0}, "map": {"version":3,"sources":["file:///G:/projects/backend/appointment_app/frontend/auth.ts"],"sourcesContent":["import NextAuth, { CredentialsSignin } from \"next-auth\";\r\nimport Credentials from \"next-auth/providers/credentials\";\r\nimport { client } from \"./helpers/api/client\";\r\n\r\n// Extend NextAuth types\r\ndeclare module \"next-auth\" {\r\n  interface User {\r\n    first_name: string;\r\n    last_name: string;\r\n    id: string;\r\n    email: string;\r\n    emailVerified: Date | null;\r\n    is_active: boolean;\r\n    is_verified: boolean;\r\n    roles: string[];\r\n    permissions: string[];\r\n    access_token: string;\r\n    expires_at: number;\r\n  }\r\n\r\n  interface Session {\r\n    access_token: string;\r\n    error?: string;\r\n  }\r\n}\r\n\r\nexport class InvalidLoginError extends CredentialsSignin {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.message = message;\r\n  }\r\n}\r\n\r\nexport const { handlers, signIn, signOut, auth } = NextAuth({\r\n  providers: [\r\n    Credentials({\r\n      async authorize(credentials) {\r\n        const { email, password } = credentials as {\r\n          email: string;\r\n          password: string;\r\n        };\r\n\r\n        try {\r\n          // Login → returns tokens\r\n          const data = await client.Login(email, password);\r\n\r\n          // Fetch user profile with access_token\r\n          const user = await client.GetUser(data.access_token);\r\n\r\n          console.log(\"User\", user);\r\n          return {\r\n            ...user,\r\n            access_token: data.access_token,\r\n            expires_at: Math.floor(Date.now() / 1000 + data.expires_in), // expiry in seconds\r\n          };\r\n        } catch (error: any) {\r\n          throw new InvalidLoginError(error.message);\r\n        }\r\n      },\r\n    }),\r\n  ],\r\n\r\n  callbacks: {\r\n    // Runs whenever token is created/updated\r\n    async jwt({ token, user }) {\r\n      // Initial login → attach tokens + user info\r\n\r\n      if (user) {\r\n        return {\r\n          ...token,\r\n          id: user.id,\r\n          email: user.email,\r\n          firstName: user.first_name,\r\n          lastName: user.last_name,\r\n          roles: user.roles,\r\n          is_active: user.is_active,\r\n          is_verified: user.is_verified,\r\n          permissions: user.permissions,\r\n          access_token: user.access_token,\r\n          expires_at: user.expires_at,\r\n        };\r\n      }\r\n\r\n      // If token still valid → return it\r\n      if (Date.now() < (token.expires_at as number) * 1000) {\r\n        return token;\r\n      }\r\n      // signOut();\r\n      // Otherwise refresh\r\n      const refreshed = await client.refreshAccessToken();\r\n\r\n      if (refreshed.error) {\r\n        return { ...token, error: \"RefreshAccessTokenError\" };\r\n      }\r\n\r\n      return {\r\n        ...token,\r\n        access_token: refreshed.access_token,\r\n        expires_at: refreshed.expires_at,\r\n      };\r\n    },\r\n\r\n    // What's sent to the client (session)\r\n    async session({ session, token }) {\r\n      session.user = {\r\n        id: token.id as string,\r\n        email: token.email as string,\r\n        emailVerified: (token.is_verified as boolean) ? new Date() : null,\r\n        first_name: token.firstName as string, // note: you stored it as 'firstName' in JWT\r\n        last_name: token.lastName as string,\r\n        is_active: token.is_active as boolean,\r\n        is_verified: token.is_verified as boolean,\r\n        roles: token.roles as string[],\r\n        permissions: token.permissions as string[],\r\n        access_token: token.access_token as string,\r\n        expires_at: token.expires_at as number,\r\n      };\r\n\r\n      session.access_token = token.access_token as string;\r\n      session.error = token.error as string | undefined;\r\n\r\n      return session;\r\n    },\r\n    // async session({ session, token }) {\r\n    //   session.user = {\r\n    //     id: token.id as string,\r\n    //     email: token.email as string,\r\n    //     emailVerified: null,\r\n    //     roles: token.roles as string[],\r\n    //     permissions: token.permissions as string[],\r\n    //     access_token: token.access_token as string,\r\n    //     expires_at: token.expires_at as number,\r\n    //   };\r\n\r\n    //   session.access_token = token.access_token as string;\r\n    //   session.error = token.error as string | undefined;\r\n\r\n    //   return session;\r\n    // },\r\n  },\r\n\r\n  pages: {\r\n    signIn: \"/signin\",\r\n  },\r\n});\r\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA;AAAA;AACA;AAAA;AACA;;;;AAwBO,MAAM,0BAA0B,yNAAiB;IACtD,YAAY,OAAe,CAAE;QAC3B,KAAK,CAAC;QACN,IAAI,CAAC,OAAO,GAAG;IACjB;AACF;AAEO,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,IAAA,4QAAQ,EAAC;IAC1D,WAAW;QACT,IAAA,iOAAW,EAAC;YACV,MAAM,WAAU,WAAW;gBACzB,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG;gBAK5B,IAAI;oBACF,yBAAyB;oBACzB,MAAM,OAAO,MAAM,kIAAM,CAAC,KAAK,CAAC,OAAO;oBAEvC,uCAAuC;oBACvC,MAAM,OAAO,MAAM,kIAAM,CAAC,OAAO,CAAC,KAAK,YAAY;oBAEnD,QAAQ,GAAG,CAAC,QAAQ;oBACpB,OAAO;wBACL,GAAG,IAAI;wBACP,cAAc,KAAK,YAAY;wBAC/B,YAAY,KAAK,KAAK,CAAC,KAAK,GAAG,KAAK,OAAO,KAAK,UAAU;oBAC5D;gBACF,EAAE,OAAO,OAAY;oBACnB,MAAM,IAAI,kBAAkB,MAAM,OAAO;gBAC3C;YACF;QACF;KACD;IAED,WAAW;QACT,yCAAyC;QACzC,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,4CAA4C;YAE5C,IAAI,MAAM;gBACR,OAAO;oBACL,GAAG,KAAK;oBACR,IAAI,KAAK,EAAE;oBACX,OAAO,KAAK,KAAK;oBACjB,WAAW,KAAK,UAAU;oBAC1B,UAAU,KAAK,SAAS;oBACxB,OAAO,KAAK,KAAK;oBACjB,WAAW,KAAK,SAAS;oBACzB,aAAa,KAAK,WAAW;oBAC7B,aAAa,KAAK,WAAW;oBAC7B,cAAc,KAAK,YAAY;oBAC/B,YAAY,KAAK,UAAU;gBAC7B;YACF;YAEA,mCAAmC;YACnC,IAAI,KAAK,GAAG,KAAK,AAAC,MAAM,UAAU,GAAc,MAAM;gBACpD,OAAO;YACT;YACA,aAAa;YACb,oBAAoB;YACpB,MAAM,YAAY,MAAM,kIAAM,CAAC,kBAAkB;YAEjD,IAAI,UAAU,KAAK,EAAE;gBACnB,OAAO;oBAAE,GAAG,KAAK;oBAAE,OAAO;gBAA0B;YACtD;YAEA,OAAO;gBACL,GAAG,KAAK;gBACR,cAAc,UAAU,YAAY;gBACpC,YAAY,UAAU,UAAU;YAClC;QACF;QAEA,sCAAsC;QACtC,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,QAAQ,IAAI,GAAG;gBACb,IAAI,MAAM,EAAE;gBACZ,OAAO,MAAM,KAAK;gBAClB,eAAe,AAAC,MAAM,WAAW,GAAe,IAAI,SAAS;gBAC7D,YAAY,MAAM,SAAS;gBAC3B,WAAW,MAAM,QAAQ;gBACzB,WAAW,MAAM,SAAS;gBAC1B,aAAa,MAAM,WAAW;gBAC9B,OAAO,MAAM,KAAK;gBAClB,aAAa,MAAM,WAAW;gBAC9B,cAAc,MAAM,YAAY;gBAChC,YAAY,MAAM,UAAU;YAC9B;YAEA,QAAQ,YAAY,GAAG,MAAM,YAAY;YACzC,QAAQ,KAAK,GAAG,MAAM,KAAK;YAE3B,OAAO;QACT;IAiBF;IAEA,OAAO;QACL,QAAQ;IACV;AACF","debugId":null}},
    {"offset": {"line": 334, "column": 0}, "map": {"version":3,"sources":["file:///G:/projects/backend/appointment_app/frontend/app/%28dashboard%29/page.tsx"],"sourcesContent":["import { auth, signOut } from \"@/auth\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport Image from \"next/image\";\r\nimport { redirect } from \"next/navigation\";\r\n\r\nexport default async function Home() {\r\n  // if (!user) return redirect(\"/Signin\");\r\n  const session = await auth();\r\n\r\n  if (!session?.user) {\r\n    console.log(\"No session\", session?.user);\r\n    return redirect(\"/Signin\");\r\n  }\r\n\r\n  console.log(\"Session\", session?.user);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"ml-6\">\r\n        {/* <h1>Hello {session?.user?.email}</h1> */}\r\n        <p>\r\n          Lorem ipsum dolor sit, amet consectetur adipisicing elit. Amet quam\r\n          accusamus ullam dignissimos ut fugit quidem voluptates, similique\r\n          labore, sit adipisci assumenda excepturi temporibus? Esse nam\r\n          veritatis iste sequi adipisci.\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;AAAA;AAKA;AAAA;;;;AAEe,eAAe;IAC5B,yCAAyC;IACzC,MAAM,UAAU,MAAM,IAAA,4GAAI;IAE1B,IAAI,CAAC,SAAS,MAAM;QAClB,QAAQ,GAAG,CAAC,cAAc,SAAS;QACnC,OAAO,IAAA,gTAAQ,EAAC;IAClB;IAEA,QAAQ,GAAG,CAAC,WAAW,SAAS;IAEhC,qBACE;kBACE,cAAA,6VAAC;YAAI,WAAU;sBAEb,cAAA,6VAAC;0BAAE;;;;;;;;;;;;AASX","debugId":null}}]
}