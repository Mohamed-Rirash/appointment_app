services:
  db:
    image: postgres:12
    restart: always
    volumes:
      - app-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer:latest
    restart: always
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DESIGN=pepa-linha-dark
    depends_on:
      db:
        condition: service_healthy

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL?Variable not set}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD?Variable not set}
    depends_on:
      db:
        condition: service_healthy

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes

  mailpit:
    image: axllent/mailpit:latest
    restart: always
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    environment:
      - MP_DATABASE=/data/mailpit.db
    volumes:
      - mailpit-data:/data

  # SMSCatcher - SMS testing service
  smscatcher:
    build:
      context: ./mock-sms
      dockerfile: Dockerfile
    restart: always
    ports:
      - "3001:3001" # API port
      - "3002:3002" # Web UI port (optional)
    environment:
      - PORT=3001
      - WEB_PORT=3002
    volumes:
      - smscatcher-data:/data
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    command: >
      sh -c "
      mkdir -p alembic/versions &&
      alembic upgrade head &&
      uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "
    # since we customised the alembic generated files now we need to run the migrations
    #  command: >
    # sh -c "
    # mkdir -p alembic/versions &&
    # alembic revision --autogenerate -m 'init' || false &&
    # alembic upgrade head &&
    # uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    # "
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ENVIRONMENT=local
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      # SMS Configuration
      - SMS_HOST=smscatcher
      - SMS_PORT=3001
      - SMS_FROM=+1234567890
    volumes:
      - ./backend:/app
      - ./backend/alembic/versions:/app/alembic/versions # <â”€â”€ persist migrations
      - /app/.venv
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/"]
      interval: 10s
      timeout: 5s
      retries: 5
 
  # frontend:
  #  build:
  #   context: ./frontend
  #   dockerfile: Dockerfile
  #   target: dev           
  #  restart: always
  #  command: pnpm dev         # ðŸ‘ˆ Use pnpm, not yarn
  #  environment:
  #   - NODE_ENV=development
  #   - NEXT_PUBLIC_API_BASE_URL=http://backend:8000
  #  depends_on:
  #   backend:
  #     condition: service_healthy
  #  volumes:
  #   - ./frontend:/app
  #   - /app/node_modules
  #   - /app/.next
  #  ports:
  #   - "3000:3000"
  #  stdin_open: true
  #  tty: true

volumes:
  app-db-data:
  redis-data:
  mailpit-data:
  smscatcher-data:

networks:
  default:
    driver: bridge
