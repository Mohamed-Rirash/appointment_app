services:
  db:
    image: postgres:12
    restart: always
    volumes:
      - app-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer:latest
    restart: always
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DESIGN=pepa-linha-dark
    depends_on:
      db:
        condition: service_healthy

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL?Variable not set}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD?Variable not set}
    depends_on:
      db:
        condition: service_healthy

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes

  mailpit:
    image: axllent/mailpit:latest
    restart: always
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    environment:
      - MP_DATABASE=/data/mailpit.db
    volumes:
      - mailpit-data:/data

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    command: sh -c "chmod +x scripts/wait_for_db.sh && scripts/wait_for_db.sh && if [ -z \"$(ls -A alembic/versions 2>/dev/null)\" ]; then alembic revision --autogenerate -m \"init\"; fi && alembic upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis: # <── ensure Redis is up first
        condition: service_started
    env_file:
      - .env
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis # <── tell backend to use the service name
      - REDIS_PORT=6379
      - ENVIRONMENT=local
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend:/app
      - /app/.venv
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  app-db-data:
  redis-data:
  mailpit-data:

networks:
  default:
    driver: bridge
