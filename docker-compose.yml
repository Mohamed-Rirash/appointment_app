services:
  # -------------------------------
  # PostgreSQL Database
  # -------------------------------
  db:
    image: postgres:17
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
    ports:
      - "5432:5432"
    networks:
      - app-network

  # -------------------------------
  # Redis
  # -------------------------------
  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - app-network

    # -------------------------------
  # Mailpit (email testing UI)
  # -------------------------------
  mailpit:
    image: axllent/mailpit:latest
    container_name: mailpit
    restart: always
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    environment:
      - MP_DATABASE=/data/mailpit.db
      - MP_SMTP_BIND_ADDR=0.0.0.0:1025
      - MP_UI_BIND_ADDR=0.0.0.0:8025
    volumes:
      - mailpit-data:/data
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8025"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # -------------------------------
  # SMS Catcher (mock SMS server)
  # -------------------------------
  smscatcher:
    build:
      context: ./mock-sms
      dockerfile: Dockerfile
    restart: always
    ports:
      - "3001:3001"
      - "3002:3002"
    environment:
      - PORT=3001
      - WEB_PORT=3002
    volumes:
      - smscatcher-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - app-network

  # -------------------------------
  # Adminer (PostgreSQL UI)
  # -------------------------------
  adminer:
    image: adminer
    restart: always
    depends_on:
      - db
    environment:
      - ADMINER_DESIGN=pepa-linha-dark
    ports:
      - "8080:8080"
    networks:
      - app-network

  # -------------------------------
  # Prestart (backend DB setup)
  # -------------------------------
  prestart:
    build:
      context: ./backend
    depends_on:
      db:
        condition: service_healthy
    command: bash scripts/prestart.sh
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - FRONTEND_HOST=${FRONTEND_HOST}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD}
      - SMTP_HOST=${SMTP_HOST:-mailpit}
      - SMTP_USER=${SMTP_USER:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL:-noreply@test.com}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SENTRY_DSN=${SENTRY_DSN}
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      # Add your backend URL
      - NEXT_PUBLIC_API_URL=http://backend:8000
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network

  # -------------------------------
  # Backend (FastAPI or similar)
  # -------------------------------
  backend:
    build:
      context: ./backend
    restart: always
    depends_on:
      db:
        condition: service_healthy
      prestart:
        condition: service_completed_successfully
      mailpit:
        condition: service_started
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - FRONTEND_HOST=${FRONTEND_HOST}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD}
      - MAIL_SERVER=${MAIL_SERVER:-mailpit}
      - MAIL_PORT=${MAIL_PORT:-1025}
      - MAIL_USERNAME=${MAIL_USERNAME:-}
      - MAIL_PASSWORD=${MAIL_PASSWORD:-}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL:-noreply@test.com}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SENTRY_DSN=${SENTRY_DSN}
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 25s
    networks:
      - app-network

volumes:
  app-db-data:
  redis-data:
  mailpit-data:
  smscatcher-data:

networks:
  app-network:
    driver: bridge
